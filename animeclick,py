from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, MessageHandler, Filters
from telegram.ext import CommandHandler
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from bs4 import BeautifulSoup
import os
import requests
import time

app = Flask(__name__)

# Ottieni il token del bot di Telegram dall'ambiente
TELEGRAM_TOKEN_BOT = os.getenv('TELEGRAM_TOKEN_BOT')

# Crea un'istanza del bot di Telegrambot = Bot(token=TELEGRAM_TOKEN_BOT)

# Crea un'istanza del driver del browser
options = Options()
options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
driver = webdriver.Chrome(executable_path='/usr/local/bin/chromedriver', options=options)
driver.set_page_load_timeout(30)

@app.route('/')
def home():
    return "Benvenuto al bot di Telegram per Animeclick!"

def set_webhook():
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN_BOT}/setWebhook"
    params = {'url': 'https://animeclick.onrender.com/' + TELEGRAM_TOKEN_BOT}
    r = requests.post(url, params=params)
    print(r.json())

def load_intro_page(driver, intro_url):
    driver.get(intro_url)
    time.sleep(5)  # aspetta che la pagina si carichi completamente

def scrape_anime_info(driver, url):
    try:
        driver.get(url)

        # Ora procedi con il scraping
        soup = BeautifulSoup(driver.page_source, 'html.parser')

        dl = soup.find('dl', {'class': 'dl-horizontal'})
        if dl is None:
            raise NoSuchElementException

        dt_dd_pairs = zip(dl.find_all('dt'), dl.find_all('dd'))

        info = {}
        for dt, dd in dt_dd_pairs:
            if dt.text in ['Titolo originale', 'Titolo inglese', 'Genere', 'Anno', 'Episodi']:
                info[dt.text] = ' '.join(dd.stripped_strings)

        trama_div = soup.find('div', {'id': 'trama-div'})
        if trama_div:
            info['Trama'] = trama_div.text.replace('Trama:', '').strip()

        return info

    except NoSuchElementException:
        print("Elemento dl non trovato, tentativo di ricaricare la pagina...")
        driver.get(url)

        # Ora procedi con il scraping
        soup = BeautifulSoup(driver.page_source, 'html.parser')

        dl = soup.find('dl', {'class': 'dl-horizontal'})
        dt_dd_pairs = zip(dl.find_all('dt'), dl.find_all('dd'))

        info = {}
        for dt, dd in dt_dd_pairs:
            if dt.text in ['Titolo originale', 'Titolo inglese', 'Genere', 'Anno', 'Episodi']:
                info[dt.text] = ' '.join(dd.stripped_strings)

        trama_div = soup.find('div', {'id': 'trama-div'})
        if trama_div:
            info['Trama'] = trama_div.text.replace('Trama:', '').strip()

        return info

def search_anime(driver, anime_title):
    # Trova il form di ricerca e inserisce il titolo dell'anime
    search_input = driver.find_element(By.ID, "globalSearch")
    search_input.clear()
    search_input.send_keys(anime_title)
    # Aggiungi un ritardo dopo l'inserimento del nuovo titolo
    time.sleep(2)

    # Aspetta che il menu a tendina dei risultati della ricerca appaia
    WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.ID, "topSearchResultList"))
    )

    try:
        # Seleziona tutti i risultati dal menu a tendina
        all_results = WebDriverWait(driver, 10).until(
            EC.presence_of_all_elements_located((By.CSS_SELECTOR, "#topSearchResultList .list.opera a"))
        )

        # Fai clic sul primo risultato per caricare la pagina dell'anime
        all_results[0].click()

        # Ritorna l'URL della nuova pagina
        return driver.current_url

    except (NoSuchElementException, TimeoutException):
        return None

def handle_message(update, context):
    # Ottieni il titolo dell'anime dal messaggio dell'utente
    title = update.message.text
    bot.send_message(chat_id=update.message.chat_id, text=f"Titolo ricevuto: {title}")

    # Carica la pagina intro
    load_intro_page(driver, intro_url)

    # Cerca l'anime con il titolo fornito
    anime_url = search_anime(driver, title)
    if anime_url is None:
        bot.send_message(chat_id=update.message.chat_id, text="Anime non trovato. Per favore, prova con un altro titolo.")
        return

    # Estrai le informazioni sull'anime
    info = scrape_anime_info(driver, anime_url)

    for key, value in info.items():
        bot.send_message(chat_id=update.message.chat_id, text=f'{key}: {value}')

    # Chiudi il driver del browser dopo aver elaborato ogni URL
    driver.quit()
    bot.send_message(chat_id=update.message.chat_id, text="Driver del browser chiuso")

@app.route('/' + TELEGRAM_TOKEN_BOT, methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(), bot)
    dp.process_update(update)
    return "OK"

def start(update, context):
    bot.send_message(chat_id=update.message.chat_id, text="Per favore, inserisci un titolo di anime.")

if __name__ == "__main__":
    # Crea un'istanza del Dispatcher
    dp = Dispatcher(bot, None, use_context=True)

    # Aggiungi un gestore di comandi al dispatcher
    dp.add_handler(CommandHandler("start", start))

    # Aggiungi un gestore di messaggi al dispatcher
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    # Imposta il webhook
    set_webhook()

    # Avvia il bot
    app.run(host="0.0.0.0", port=int(os.getenv('PORT', 5000)))
